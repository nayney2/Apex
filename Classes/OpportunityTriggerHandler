public class OpportunityTriggerHandler {
    public static void updateOppDescription(List<Opportunity> oppList){
        for(Opportunity opp : oppList){
            if(opp.Amount <= 500000 && opp.Amount >= 100000){
                opp.description = 'Hot opportunity';
            }
        } 
    }
    public static void updateOpportunityDescription(List<Opportunity> oppList, Map<Id,Opportunity> MapOpp){
        for(Opportunity opp :oppList){
            if(MapOpp == null || (MapOpp != null  && opp.StageName!= MapOpp.get(opp.Id).StageName && opp.StageName!=null) ){
                if(opp.StageName == 'Closed Lost'){
                    opp.Description = 'Opportunity is Closed Lost';
                }
                else if(opp.StageName == 'Closed Won'){
                    opp.Description = 'Opportunity is Closed Won';
                }
                if(opp.StageName != 'Closed Lost' && opp.StageName != 'Closed Won'){
                    opp.Description = 'Opportunity is Open';
                }
                
            }
        }
    }
    public static void createRelatedTask(List<Opportunity> oppList, Map<Id,Opportunity> MapOpp){
        List<Task> myTasks = new List<Task>();
        for(Opportunity opp :oppList){
            if( opp.stageName != MapOpp.get(opp.id).stageName){
                  Task myTask = new Task();
                          myTask.WhatId = opp.Id ;  //related to 
                          myTask.status = 'In progress' ;
                          myTask.subject = 'Related task' ;
                          myTask.OwnerId = opp.OwnerId ;  //OR Userinfo.getUserId() ;
                          myTasks.add(myTask);
            }
        } 
        Insert myTasks ;	
        
    }
        public static void preventCreationOfoppWithoutAmount(List<Opportunity> oppList){
        for(Opportunity opp: oppList){
            if( opp.amount == null){
              opp.addError('Opportunities with null amount cannot be updated');

        }
        }}
}
