public class OpportunityTriggerHandler {
    public static void updateOppDescription(List<Opportunity> oppList){
        for(Opportunity opp : oppList){
            if(opp.Amount <= 500000 && opp.Amount >= 100000){
                opp.description = 'Hot opportunity';
            }
        } 
    }
    public static void updateOpportunityDescription(List<Opportunity> oppList, Map<Id,Opportunity> MapOpp){
        for(Opportunity opp :oppList){
            if(MapOpp == null || (MapOpp != null  && opp.StageName!= MapOpp.get(opp.Id).StageName && opp.StageName!=null) ){
                if(opp.StageName == 'Closed Lost'){
                    opp.Description = 'Opportunity is Closed Lost';
                }
                else if(opp.StageName == 'Closed Won'){
                    opp.Description = 'Opportunity is Closed Won';
                }
                if(opp.StageName != 'Closed Lost' && opp.StageName != 'Closed Won'){
                    opp.Description = 'Opportunity is Open';
                }
                
            }
        }
    }
        @isTest static void createRelatedTaskTest(){
        List<Opportunity> myOpportunities = new List<Opportunity>();
            Opportunity opp = new Opportunity(
                name = 'twix',closeDate=date.today(),
                stageName='Close lost');
            myOpportunities.add(opp);
        Insert myOpportunities;
            for(Opportunity op : myOpportunities){
                op.stageName='Close won';
            }
        Test.startTest();
        Update myOpportunities;
        Test.stopTest();  
         List<Task> queryTask= [SELECT Id FROM Task
                                               Where whatId =:myOpportunities[0].id];
        System.AssertEquals(1,queryTask.size() ,'Task not updated');
    }
}
