public class CandidateTriggerHandler{
    public static void sendEmail(List<Candidate__c> myCandidates,Map<Id,Candidate__c> MapCanditates){
    for(Candidate__c can :myCandidates){
        if((MapCanditates != null && MapCanditates.get(can.id).Email__c == null && can.Email__c != null && can.Email__c != MapCanditates.get(can.id).Email__c) ||(MapCanditates == null && can.Email__c!=null )) {
            // Create an email message object
                Messaging.SingleEmailMessage mail = new Messaging.SingleEmailMessage();
                String[] toAddresses = new String[] {can.Email__c};
                mail.setToAddresses(toAddresses);
                mail.setSubject('Congrats');
                mail.setPlainTextBody('Candidate has been created');
                // Pass this email message to the built-in sendEmail method 
                // of the Messaging class
                Messaging.SendEmailResult[] results = Messaging.sendEmail(
                                         new Messaging.SingleEmailMessage[] { mail });
                // Call a helper method to inspect the returned results
                inspectResults(results);
        }
    }
    }
        // Helper method
    private static Boolean inspectResults(Messaging.SendEmailResult[] results) {
        Boolean sendResult = true;
        // sendEmail returns an array of result objects.
        // Iterate through the list to inspect results. 
        // In this class, the methods send only one email, 
        // so we should have only one result.
        for (Messaging.SendEmailResult res : results) {
            if (res.isSuccess()) {
                System.debug('Email sent successfully');
            }
            else {
                sendResult = false;
                System.debug('The following errors occurred: ' + res.getErrors());                 
            }
        }
        return sendResult;
    }
    public static void validationRule(List<Candidate__c> myCandidates,Map<Id,Candidate__c> MapCanditates) {
        List<Candidate__c> compareCandidates = [SELECT Id,Email__c FROM Candidate__c WHERE Id NOT IN :myCandidates ];
        for(Candidate__c can :myCandidates){
            if((MapCanditates == null && can.Email__c !=null)||(MapCanditates != null && can.Email__c !=null && can.Email__c !=MapCanditates.get(can.id).Email__c)){
            for(Candidate__c comCan : compareCandidates){
                if(can.Email__c == comCan.Email__c){
                  //  can.addError('Duplicate Email');  //To prevent Insertion
                  can.Duplicate_Candidate__c	= true;
                }
            }
        }
}
    }
}
