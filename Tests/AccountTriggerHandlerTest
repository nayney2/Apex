@isTest
private class TestClass {
    @isTest static void beforeInsertTest(){
        List<Account> myAccounts= new List<Account>();
        Account myAccount = new Account();
        myAccount.name = 'M 1';
        myAccount.industry = 'Media';
        myAccounts.add(myAccount); 
        Account secAccount = new Account();
        secAccount.name = 'M 2';
        secAccount.industry = 'Apparel';
        myAccounts.add(secAccount);
        insert myAccounts;
        for(Account acc : myAccounts){
            if(acc.name == 'M 2')
         acc.industry = 'Energy';
        }
        Test.startTest();
        update myAccounts ; 
        Test.stopTest();
        List<Account> queryAccounts= [Select Id FROM Account Where Id IN :myAccounts] ;
			System.AssertEquals('Hot',queryAccounts[0].rating);  
            System.AssertEquals('Hot',queryAccounts[1].rating);  

    }
        @isTest    public static void CopyAddressTest(){
        List<Account> myAccounts= new List<Account>();
        Account myAccount = new Account();
        myAccount.name = 'Test Acc';
        myAccount.CopyBillingAddressTo__c = true ;
        myAccount.BillingCountry='Egypt'; 
        myAccount.BillingCity ='Alexandria' ;
        myAccount.BillingStreet='Sidi Gaber';
        myAccount.BillingState='Alexandria' ;
        myAccount.BillingPostalCode = '11522' ;
        myAccounts.add(myAccount);
        Account secAccount = new Account();
        secAccount.name = 'Test Acc 2';
        secAccount.CopyBillingAddressTo__c = false;
        secAccount.BillingCountry='Egypt 2'; 
        secAccount.BillingCity ='Alexandria' ;
        secAccount.BillingStreet='Sidi Gaber 2';
        secAccount.BillingState='Alexandria 2' ;
        secAccount.BillingPostalCode = '11544' ;
        myAccounts.add(secAccount);
        Test.startTest();
        insert myAccounts;
            for(Account acc : myAccounts){
                if(acc.BillingPostalCode == '11544'){
                 acc.BillingCity ='Cairo' ;
                 acc.CopyBillingAddressTo__c = true ;}

            }
                    Update myAccounts;
        Test.stopTest();
        List<Account> checkAccounts= [SELECT Id,ShippingCity
                                      FROM Account
                                      Where Id IN :myAccounts];
        System.AssertEquals('Alexandria',checkAccounts[0].ShippingCity ,'Account not inserted');
                    System.AssertEquals('Cairo',checkAccounts[1].ShippingCity ,'Account not updated');

    }
     @isTest    public static void createOpportunityOrContact(){
         List<Account> myAccounts= new List<Account>();
        Account myAccount = new Account();
        myAccount.name = 'Test 100';
        myAccount.New_Opportunity__c = true;
        myAccount.New_Contact__c = true;
        myAccount.active__c = 'yes' ;
        myAccounts.add(myAccount);
                Test.startTest();
        insert myAccounts;
                Test.stopTest();

         List<Account> checkAccounts= [SELECT Id,(SELECT Id FROM Contacts ),(SELECT Id FROM opportunities)
                                               FROM Account
                                               Where Id =:myAccounts[0].id];

        System.AssertEquals(1,checkAccounts[0].Contacts.size() ,'Contacts not inserted');
        System.AssertEquals(1,checkAccounts[0].opportunities.size() ,'Opportunities not inserted');
    }
    @isTest    public static void accountPhoneValues(){
        List<Account> myAccounts= new List<Account>();
        Account myAccount = new Account();
        myAccount.name = 'Test 591';
        myAccount.phone = '546' ;
        myAccounts.add(myAccount);
        Test.startTest();
        insert myAccounts;
        for(Account a : myAccounts){
            if(a.Id ==myAccounts[0].Id ){
                myAccount.phone = '999' ;
            }
        }
        update myAccounts;
        Test.stopTest();
        
        List<Account> checkAccounts= [SELECT Id,description
                                      FROM Account
                                      Where Id =:myAccounts[0].id];
        
        System.Assert(checkAccounts[0].description !=null,'Account not updated');
//OR 
//System.Assert(checkAccounts[0].PHONE =='999','Account not updated');
        
    }
}
