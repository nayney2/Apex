@isTest
public class CandidateTriggerHandlerTest {
    @isTest public static void sendEmailTest(){
        List<Candidate__c> ListCan = new List<Candidate__c>();
        Candidate__c firstCan = new Candidate__c();
        firstCan.First_Name__c = 'First';
        firstCan.Last_Name__c = 'can';
        firstCan.Email__c = 'test@gmail.com';
        ListCan.add(firstCan);
        Candidate__c secondCan = new Candidate__c();
        secondCan.First_Name__c = 'Second';
        secondCan.Last_Name__c = 'can';
        ListCan.add(secondCan);
        Insert ListCan;
        for(Candidate__c can :ListCan){
            if(Can.First_Name__c== 'Second' )
        can.Email__c = 'test@gmail.com';}
        Test.startTest();
        Update ListCan;
        Test.stopTest();
        List<Candidate__c> queryCan = [SELECT Id,Email__c FROM Candidate__c WHERE ID IN :ListCan];
        	System.AssertEquals('baddagmanal1999@gmail.com',queryCan[0].Email__c,'Candidate has not been updated' );
    }
    @isTest public static void validationRule(){
         List<Candidate__c> ListCan = new List<Candidate__c>();
        Candidate__c firstCan = new Candidate__c();
        firstCan.First_Name__c = 'First';
        firstCan.Last_Name__c = 'can';
        firstCan.Email__c = 'test@gmail.com';
        ListCan.add(firstCan);
	try{
        Insert ListCan ;
	        }catch(DMLException e){
	Boolean  exp = (e.getMessage().contains('Duplicate Email')) ? true : false ; 
	 }
//Updating Duplicate_Candidate__c works from UI
    }
  @isTest public static void uinTest(){
        List<Candidate__c> ListCan = new List<Candidate__c>();
        Candidate__c firstCan = new Candidate__c();
        firstCan.First_Name__c = 'First';
        firstCan.Last_Name__c = 'cwan';
        firstCan.Year_of_passing__c = 2026 ;
        firstCan.City_of_birth__c = 'Casablanca' ;
        firstCan.Branch__c ='Ing√©nieur en Computer Science';
        firstCan.Year_of_birth__c = 1989 ;
        ListCan.add(firstCan);
        Insert ListCan ;
        for(Candidate__c can : ListCan){
            if(can.Id == ListCan[0].Id)
            firstCan.Branch__c ='Computer Science';
        }
        Update ListCan ;
        List<Candidate__c> queryCan = [SELECT Id,UIN__c	 FROM Candidate__c WHERE ID =:ListCan[0].id];
        System.AssertEquals('26-CSCa-1989',queryCan[0].UIN__c,'Candidate has not been inserted' );
    }
}
