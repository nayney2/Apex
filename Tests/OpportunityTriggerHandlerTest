@isTest
private class TestClass {
@isTest static void UpdateOppDescriptionTest(){
        List<Opportunity> myOpportunities = new List<Opportunity>();
        for(integer i=0;i<2;i++){
            Opportunity opp = new Opportunity();
                opp.name = 'test 00'+i;
            opp.closeDate=date.today();
                opp.stageName='prospecting';
            opp.amount = 300000;
            myOpportunities.add(opp);
        }
        Test.startTest();
        Insert myOpportunities;
        Test.stopTest();
        List<Opportunity> queryOpportunities= [SELECT Id,description
                                               FROM Opportunity
                                               Where Id =:myOpportunities];
        System.AssertEquals('Hot opportunity',queryOpportunities[0].description ,'Opportunity not updated');
    }
  @isTest    public static void updateOpportunityDescription(){
        List<Opportunity> myOpportunities = new List<Opportunity>();
        Opportunity opp = new Opportunity();
        opp.Name = 'Opp 111';
        opp.StageName = 'Prospecting';
        opp.CloseDate = date.today();
        myOpportunities.add(opp);
        Opportunity secOpp = new Opportunity();
        secOpp.Name = 'Opp 222';
        secOpp.StageName = 'Qualification';
        secOpp.CloseDate = date.today();
        myOpportunities.add(secOpp);
        insert myOpportunities;
        for(Opportunity o : myOpportunities){
            if(o.Name == 'Opp 222'){
                o.StageName = 'Closed Lost';}
        }  
        Test.startTest();
        Update myOpportunities ;
        Test.stopTest();
        List<Opportunity> queryOpportunities = [SELECT Id,Description FROM OPPORTUNITY
                                                WHERE id IN :myOpportunities];
        System.AssertEquals('Opportunity is Open',queryOpportunities[0].description ,'Opportunity not inserted');
        System.AssertEquals('Opportunity is Closed Lost',queryOpportunities[1].Description,'Opportunity not updated'); 
    }
        @isTest static void createRelatedTaskTest(){
        List<Opportunity> myOpportunities = new List<Opportunity>();
            Opportunity opp = new Opportunity(
                name = 'twix',closeDate=date.today(),
                stageName='Close lost');
            myOpportunities.add(opp);
        Insert myOpportunities;
            for(Opportunity op : myOpportunities){
                op.stageName='Close won';
            }
        Test.startTest();
        Update myOpportunities;
        Test.stopTest();  
         List<Task> queryTask= [SELECT Id FROM Task
                                               Where whatId  IN :myOpportunities];
        System.AssertEquals(1,queryTask.size() ,'Task not updated');
    }
    @isTest static void preventCreationOfoppWithoutAmountTest(){
         List<Opportunity> myOpportunities = new List<Opportunity>();
        Opportunity opp = new Opportunity(
            name = 'test',closeDate=date.today(),
            stageName='Prospecting');
        myOpportunities.add(opp);
        try{
                    Insert myOpportunities;
        }catch(DMLexception e){
            Boolean  exp = (e.getMessage().contains('Opportunities with null amount cannot be updated')) ? true : false 	;
                  System.AssertEquals(true,exp,'Account not Updated');
        }
    }
    @isTest static void populateCloseLostReasonTest(){
         List<Opportunity> myOpportunities = new List<Opportunity>();
        Opportunity opp = new Opportunity(
            name = 'test',closeDate=date.today(),
            stageName='Prospecting');
        myOpportunities.add(opp);
        Insert myOpportunities;
        Test.startTest();
         try{
           for(Opportunity o : myOpportunities){
                o.stageName='Close Lost';
            }
            Update myOpportunities;

        }catch(DMLexception e){
            Boolean  exp = (e.getMessage().contains('Please populate Closed Lost reason')) ? true : false 	;
                  System.AssertEquals(true,exp,'Opportunity not Updated');
        }
        Test.stopTest();
    }
}
